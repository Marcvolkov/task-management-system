// test-api.js - –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test-api.js

const API_URL = 'http://localhost:5000/api';
let authToken = '';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(method, endpoint, data = null, token = null) {
  const options = {
    method,
    headers: {
      'Content-Type': 'application/json',
    },
  };

  if (token) {
    options.headers['Authorization'] = `Bearer ${token}`;
  }

  if (data) {
    options.body = JSON.stringify(data);
  }

  try {
    const response = await fetch(`${API_URL}${endpoint}`, options);
    const result = await response.json();
    
    if (!response.ok) {
      console.error(`‚ùå ${method} ${endpoint}:`, result.error || 'Request failed');
      return null;
    }
    
    console.log(`‚úÖ ${method} ${endpoint}:`, result);
    return result;
  } catch (error) {
    console.error(`‚ùå ${method} ${endpoint}:`, error.message);
    return null;
  }
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function runTests() {
  console.log('üöÄ Starting API tests...\n');

  // 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  console.log('1Ô∏è‚É£ Testing Registration...');
  const registerData = {
    username: `user_${Date.now()}`,
    email: `test_${Date.now()}@example.com`,
    password: 'password123'
  };
  
  const registerResult = await makeRequest('POST', '/auth/register', registerData);
  if (registerResult) {
    authToken = registerResult.token;
  }

  // 2. –í—Ö–æ–¥
  console.log('\n2Ô∏è‚É£ Testing Login...');
  const loginResult = await makeRequest('POST', '/auth/login', {
    email: registerData.email,
    password: registerData.password
  });
  
  if (loginResult) {
    authToken = loginResult.token;
  }

  // 3. –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
  console.log('\n3Ô∏è‚É£ Testing Get Profile...');
  await makeRequest('GET', '/auth/me', null, authToken);

  // 4. –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
  console.log('\n4Ô∏è‚É£ Testing Create Task...');
  const task1 = await makeRequest('POST', '/tasks', {
    title: 'Complete backend development',
    description: 'Finish all API endpoints',
    priority: 'high'
  }, authToken);

  // 5. –°–æ–∑–¥–∞—Ç—å –µ—â–µ –∑–∞–¥–∞—á–∏
  console.log('\n5Ô∏è‚É£ Creating more tasks...');
  await makeRequest('POST', '/tasks', {
    title: 'Design frontend',
    description: 'Create React components',
    priority: 'medium'
  }, authToken);

  await makeRequest('POST', '/tasks', {
    title: 'Write documentation',
    description: 'Document all API endpoints',
    priority: 'low'
  }, authToken);

  // 6. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
  console.log('\n6Ô∏è‚É£ Testing Get All Tasks...');
  await makeRequest('GET', '/tasks', null, authToken);

  // 7. –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
  if (task1 && task1.task) {
    console.log('\n7Ô∏è‚É£ Testing Update Task...');
    await makeRequest('PUT', `/tasks/${task1.task.id}`, {
      status: 'in_progress'
    }, authToken);
  }

  // 8. –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log('\n8Ô∏è‚É£ Testing Get Stats...');
  await makeRequest('GET', '/tasks/stats', null, authToken);

  // 9. –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á
  console.log('\n9Ô∏è‚É£ Testing Search...');
  await makeRequest('GET', '/tasks/search?q=backend', null, authToken);

  // 10. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
  console.log('\nüîü Testing Filters...');
  await makeRequest('GET', '/tasks?priority=high', null, authToken);

  console.log('\n‚ú® Tests completed!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests().catch(console.error);